# Generated by Django 5.2.1 on 2025-05-13 20:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskStatus",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of task status.", max_length=255),
                ),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Order of task status."),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Determines whether task status is default (todo, done, in review, etc).",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created task status.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_statuses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this task status.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_statuses",
                        to="core.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who made the last change.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_task_statuses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Name of task.", max_length=255)),
                (
                    "priority",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="Priority of task.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Description of task.",
                        max_length=2000,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, help_text="Start date of task (if any).", null=True
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, help_text="End date of task (if any).", null=True
                    ),
                ),
                (
                    "close_date",
                    models.DateTimeField(
                        blank=True, help_text="Close date of task.", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created task.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Project to which task belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.project",
                    ),
                ),
                (
                    "responsible",
                    models.ForeignKey(
                        blank=True,
                        help_text="Responsible of task.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="responsible_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who made the last change.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        blank=True,
                        help_text="Status of task.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="tasks.taskstatus",
                    ),
                ),
            ],
            options={
                "ordering": ["priority"],
            },
        ),
        migrations.AddConstraint(
            model_name="taskstatus",
            constraint=models.UniqueConstraint(
                fields=("tenant", "order"), name="unique_task_status_order_for_tenant"
            ),
        ),
        migrations.AddConstraint(
            model_name="task",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("start_date__isnull", True),
                    ("end_date__isnull", True),
                    ("start_date__lte", models.F("end_date")),
                    _connector="OR",
                ),
                name="task_start_date_before_or_equal_to_end_date",
            ),
        ),
    ]
